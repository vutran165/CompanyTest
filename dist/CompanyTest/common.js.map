{"version":3,"sources":["webpack:///./src/app/shared/error/error.service.ts","webpack:///./src/app/shared/error/http-error-handler.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAmD;AAMnD;IAIE;QAFA,iBAAY,GAAW,EAAE,CAAC;IAEV,CAAC;IAJN,YAAY;QAHxB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;;OACW,YAAY,CAKxB;IAAD,mBAAC;CAAA;AALwB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLkB;AACL;AACS;AAS/C;IAEE,iCAAoB,YAA0B;QAA9C,iBAAmD;QAA/B,iBAAY,GAAZ,YAAY,CAAc;QAG9C,mEAAmE;QACnE,wBAAmB,GAAG,UAAC,WAAgB;YAAhB,8CAAgB;YAAK,iBAAI,SAAuB,EACrE,MAAgB;gBAD8B,mDAAuB;gBACrE,kCAAS,EAAO;gBAAK,YAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC;YAAjD,CAAiD;QAD5B,CAC4B;IALtB,CAAC;IAOnD,+CAA+C;IAC/C,iDAAiD;IACjD,mEAAmE;IAEnE,8CAAY,GAAZ,UAAgB,WAAgB,EAAE,SAAuB,EAAE,MAAgB;QAA3E,iBAcC;QAde,8CAAgB;QAAE,mDAAuB;QAAE,kCAAS,EAAO;QACzE,OAAO,UAAC,KAAwB;YAC9B,yDAAyD;YACzD,OAAO,CAAC,GAAG,CAAE,KAAK,CAAC,CAAC;YACpB,IAAM,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,YAAY,UAAU,CAAC,CAAC,CAAC;gBACnD,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,kBAAgB,KAAK,CAAC,MAAM,kBAAY,KAAK,CAAC,OAAO,QAAI,CAAC;YAElF,iDAAiD;YACjD,4EAA4E;YAC5E,KAAI,CAAC,YAAY,CAAC,YAAY,GAAM,WAAW,WAAM,SAAW,CAAC;YAEjE,uBAAuB;YACvB,OAAO,+CAAE,CAAC,MAAM,CAAC,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC;IA3BU,uBAAuB;QAHnC,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAGkC,2DAAY;OAFnC,uBAAuB,CA4BnC;IAAD,8BAAC;CAAA;AA5BmC","file":"common.js","sourcesContent":["import { Injectable, Output } from '@angular/core';\r\nimport { StatusCodeObject, HttpResponseObject } from './status-code';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ErrorService {\r\n\r\n  errorMessage: string = '';\r\n\r\n  constructor() { }\r\n}\r\n\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ErrorService } from './error.service';\r\n\r\n\r\n\r\nexport type HandlerError = <T> (operation?: string, result?: T) => (error: HttpErrorResponse) => Observable<T>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpErrorHandlerService {\r\n\r\n  constructor(private errorService: ErrorService) { }\r\n\r\n\r\n  // Create handlerError function that already knows the service name\r\n  createdHandlerError = (serviceName = '') => <T>(operation = 'operation',\r\n    result = {} as T) => this.handlerError(serviceName, operation, result)\r\n\r\n  // @param serviceName: name of the data service\r\n  // @param operation: name of the failed operation\r\n  // @param result: optional value to return as the observable result\r\n\r\n  handlerError<T>(serviceName = '', operation = 'operation', result = {} as T): any {\r\n    return (error: HttpErrorResponse): Observable<T> => {\r\n      // todo-> send the error to remote logging infrastructure\r\n      console.log (error);\r\n      const message = (error.error instanceof ErrorEvent) ?\r\n        error.error.message : `{error code: ${error.status}, body: \"${error.message}\"}`;\r\n\r\n      // todo-> transforming error for user consumption\r\n      // this.errorService.errorMessage.message = `${serviceName} ->${operation}`;\r\n      this.errorService.errorMessage = `${serviceName} ->${operation}`;\r\n\r\n      // return a safe result\r\n      return of(result);\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":""}